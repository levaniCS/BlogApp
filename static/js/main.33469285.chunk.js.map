{"version":3,"sources":["store/actions/auth.js","store/actions/actionTypes.js","screens/AuthScreen.js","components/Header.js","components/NewPost.js","screens/NewPostScreen.js","components/ListOfUsers.js","store/actions/ListOfUsers.js","screens/ListOfUsersScreen.js","components/Post.js","screens/MyFeedScreen.js","components/Logout.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","store/reducers/ListOfUsers.js","index.js"],"names":["authSuccess","token","userId","type","idToken","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","AuthScreen","state","email","password","isLogin","handleChange","event","setState","target","name","value","switchAuthModeHandler","prevState","onSubmitHandler","preventDefault","props","onAuth","this","authRedirectPath","onSetAuthRedirectPath","authRedirect","isAuthenticated","to","ErrMsg","error","style","color","message","Wrapper","MyForm","onSubmit","autocomplete","Input","placeholder","onChange","LoginBtn","SwitchingBtn","onClick","Component","connect","auth","userName","authData","returnSecureToken","UserName","substring","lastIndexOf","setItem","url","axios","post","then","response","expirationDate","Date","getTime","data","expiresIn","localId","catch","err","actions","path","styled","div","form","button","input","onLogout","getItem","MyHeader","NavL","NavItems","NavItem","activeClassName","header","ul","li","NavLink","NewPost","title","content","onPressBtn","res","console","log","StLabel","MyInp","MyTxtarea","rows","Button","label","textarea","NewPostScreen","ListOfUsers","handleUserClick","user","onClickUser","followList","onGetUsers","usersArr","Object","values","map","filter","item","pos","indexOf","index","splice","outUsers","Myli","key","users","get","followed","newList","concat","followUsers","ListOfUsersScreen","Post","fontWeight","display","alignItems","justifyContent","whiteSpace","wordBreak","MyFeedScreen","OutputData","queryParams","Posts","Logout","App","onTryAutoSignup","routes","exact","component","isAuth","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initialState","authStart","action","authFail","authLogout","setAuthRedirectPath","reducer","rootReducer","combineReducers","authReducer","usersReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33469285.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const authStart = (userName) => {\r\n  return {\r\n    type: actionTypes.AUTH_START,\r\n    userName: userName\r\n  };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    idToken: token,\r\n    userId: userId\r\n  };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('expirationDate');\r\n  localStorage.removeItem('userId');\r\n  localStorage.removeItem('userName');\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT\r\n  };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationTime * 1000);\r\n  };\r\n};\r\n\r\nexport const auth = (email, password, isLogin) => {\r\n  return (dispatch) => {\r\n    dispatch(authStart(email));\r\n    const authData = {\r\n      email: email,\r\n      password: password,\r\n      returnSecureToken: true\r\n    };\r\n    let UserName = email.substring(0, email.lastIndexOf('@'));\r\n\r\n    localStorage.setItem('userName', UserName);\r\n    let url =\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBzhZE2lUwl41epDFtbyMfDiVgVF48BTT8';\r\n    // signUp\r\n    if (!isLogin) {\r\n      url =\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBzhZE2lUwl41epDFtbyMfDiVgVF48BTT8'; //signIn\r\n    }\r\n\r\n    axios\r\n      .post(url, authData)\r\n      .then((response) => {\r\n        const expirationDate = new Date(\r\n          new Date().getTime() + response.data.expiresIn * 1000\r\n        );\r\n        localStorage.setItem('token', response.data.idToken);\r\n        localStorage.setItem('expirationDate', expirationDate);\r\n        localStorage.setItem('userId', response.data.localId);\r\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n        dispatch(checkAuthTimeout(response.data.expiresIn));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(authFail(err.response.data.error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n  return {\r\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n    path: path\r\n  };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return (dispatch) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n      if (expirationDate < new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem('userId');\r\n        dispatch(authSuccess(token, userId));\r\n        dispatch(\r\n          checkAuthTimeout(\r\n            (expirationDate.getTime() - new Date().getTime()) / 1000\r\n          )\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\n\r\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';\r\n\r\nexport const GET_USERS_START = 'GET_USERS_START';\r\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\r\nexport const GET_USERS_FAIL = 'GET_USERS_FAIL';\r\n\r\nexport const FOLLOW__USERS_HANDLER = 'FOLLOW__USERS_HANDLER';\r\n","import React, { Component } from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport * as actions from '../store/actions/index';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass AuthScreen extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n    isLogin: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.authRedirectPath !== '/') {\r\n      this.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isLogin: !prevState.isLogin };\r\n    });\r\n  };\r\n\r\n  onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.email,\r\n      this.state.password,\r\n      this.state.isLogin\r\n    );\r\n    this.setState({\r\n      email: '',\r\n      password: ''\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n    const ErrMsg = this.props.error ? (\r\n      <p style={{ color: 'red' }}>{this.props.error.message}</p>\r\n    ) : null;\r\n    return (\r\n      <Wrapper>\r\n        {authRedirect}\r\n        <MyForm onSubmit={this.onSubmitHandler} autocomplete='off'>\r\n          <h1 style={{ color: '#e84855' }}>Welcome !</h1>\r\n          {ErrMsg}\r\n          <Input\r\n            type='email'\r\n            name='email'\r\n            autocomplete='off'\r\n            placeholder='Email'\r\n            value={this.state.email}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <Input\r\n            type='password'\r\n            name='password'\r\n            autocomplete='off'\r\n            placeholder='Password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n          />\r\n          <LoginBtn type='submit'>\r\n            {this.state.isLogin ? 'Login' : 'Registration'}\r\n          </LoginBtn>\r\n          <SwitchingBtn onClick={this.switchAuthModeHandler}>\r\n            Switch to {this.state.isLogin ? 'Registration' : 'Login'}\r\n          </SwitchingBtn>\r\n        </MyForm>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isLogin) =>\r\n      dispatch(actions.auth(email, password, isLogin)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthScreen);\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin: 100px auto;\r\n  width: 50%;\r\n  height: auto;\r\n  box-shadow: 0 2px 3px #ccc;\r\n  border: 1px solid #eee;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n\r\n  @media (max-width: 400px) {\r\n    width: 400px;\r\n  }\r\n`;\r\n\r\nconst MyForm = styled.form`\r\n  width: 60%;\r\n  height: auto;\r\n  display: grid;\r\n  grid-row-gap: 20px;\r\n  align-content: center;\r\n`;\r\n\r\nconst LoginBtn = styled.button`\r\n  width: 70%;\r\n  height: auto;\r\n  border-top: 5px;\r\n  padding: 5px;\r\n  border: 1px solid #e84855;\r\n  justify-self: center;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SwitchingBtn = styled.button`\r\n  width: 70%;\r\n  border: none;\r\n  justify-self: center;\r\n  background-color: white;\r\n  color: red;\r\n  font-weight: bold;\r\n  font-size: 15px;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  :focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 5px;\r\n  border-radius: 10px;\r\n  background-color: white;\r\n  border: none;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from '../store/actions/index';\r\n\r\nimport '../App.css';\r\n\r\nconst Header = (props) => {\r\n  const UserName = localStorage.getItem('userName');\r\n  return (\r\n    <MyHeader>\r\n      <div>\r\n        <h1>\r\n          <NavL to='/'>\r\n            Hello <span style={{ color: '#adefd1ff' }}>{UserName}</span>\r\n          </NavL>\r\n        </h1>\r\n      </div>\r\n      <nav>\r\n        <NavItems>\r\n          <NavItem>\r\n            <NavL activeClassName='Active-nav' to='/users'>\r\n              List of Users\r\n            </NavL>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavL activeClassName='Active-nav' to='/feed'>\r\n              My feed\r\n            </NavL>\r\n          </NavItem>\r\n          <NavItem onClick={props.onLogout}>\r\n            <NavL to='/login'>Logout</NavL>\r\n          </NavItem>\r\n        </NavItems>\r\n      </nav>\r\n    </MyHeader>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userName: state.auth.userName\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onLogout: () => dispatch(actions.logout())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n\r\nconst MyHeader = styled.header`\r\n  height: 70px;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: #00203fff;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  box-sizing: border-box;\r\n  z-index: 90;\r\n`;\r\n\r\nconst NavItems = styled.ul`\r\n  margin: 0;\r\n  padding: 10px;\r\n  list-style: none;\r\n  display: flex;\r\n  flex-flow: row;\r\n  height: 100%;\r\n`;\r\n\r\nconst NavItem = styled.li`\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  white-space: nowrap;\r\n  color: white;\r\n  font-weight: bold;\r\n  display: block;\r\n  width: 100%;\r\n`;\r\n\r\nconst NavL = styled(NavLink)`\r\n  color: white;\r\n  text-decoration: none;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  display: block;\r\n\r\n  &:hover {\r\n    color: blue;\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from 'axios';\r\n\r\nclass NewPost extends Component {\r\n  state = {\r\n    title: '',\r\n    content: ''\r\n  };\r\n\r\n  onPressBtn = () => {\r\n    let UserName = localStorage.getItem('userName');\r\n    const data = {\r\n      title: this.state.title,\r\n      content: this.state.content,\r\n      userName: UserName,\r\n      userId: this.props.userId\r\n    };\r\n    axios\r\n      .post(\r\n        'https://postsapp-adcf2.firebaseio.com/post.json?auth=' +\r\n          this.props.token,\r\n        data\r\n      )\r\n      .then((res) => console.log(res))\r\n      .catch((err) => console.log(err));\r\n    this.setState({ title: '', content: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <h1 style={{ color: '#e84855' }}>Write a Post</h1>\r\n        <StLabel>Title</StLabel>\r\n        <MyInp\r\n          type='text'\r\n          value={this.state.title}\r\n          onChange={(event) => this.setState({ title: event.target.value })}\r\n        />\r\n        <StLabel>Content</StLabel>\r\n        <MyTxtarea\r\n          rows='4'\r\n          value={this.state.content}\r\n          onChange={(event) => this.setState({ content: event.target.value })}\r\n        />\r\n        <Button onClick={this.onPressBtn}>Post</Button>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userName: state.auth.userName,\r\n    userId: state.auth.userId,\r\n    token: state.auth.token\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NewPost);\r\n\r\nconst Wrapper = styled.div`\r\n  width: 80%;\r\n  height: auto;\r\n  margin: 20px auto;\r\n  border: 1px solid #eee;\r\n  box-shadow: 0 2px 3px #ccc;\r\n  text-align: center;\r\n`;\r\n\r\nconst StLabel = styled.label`\r\n  display: block;\r\n  margin: 10px auto;\r\n  color: #00203fff;\r\n  text-align: center;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MyInp = styled.input`\r\n  display: block;\r\n  width: 80%;\r\n  box-sizing: border-box;\r\n  border: 1px solid #00203fff;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  font: inherit;\r\n  margin: auto;\r\n`;\r\nconst MyTxtarea = styled.textarea`\r\n  display: block;\r\n  width: 80%;\r\n  box-sizing: border-box;\r\n  border: 1px solid #00203fff;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  font: inherit;\r\n  margin: auto;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 5px 0;\r\n  width: 30%;\r\n  padding: 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #e84855;\r\n  color: #fa923f;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: blue;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport Header from '../components/Header';\r\nimport NewPost from '../components/NewPost';\r\n\r\nconst NewPostScreen = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <NewPost />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPostScreen;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport * as actions from '../store/actions/index';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass ListOfUsers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onGetUsers();\r\n  }\r\n\r\n  handleUserClick = (user) => {\r\n    this.setState({\r\n      [user]: !this.state[user]\r\n    });\r\n    this.props.onClickUser(user, this.state[user], this.props.followList);\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props.followList);\r\n    let usersArr = [];\r\n    if (this.props.data) {\r\n      usersArr = Object.values(this.props.data).map((post) => {\r\n        return post.userName;\r\n      }); // convert object to array => [\"test\", \"test\", \"test\", \"admin\", \"admin\"]\r\n    }\r\n\r\n    usersArr = usersArr.filter((item, pos) => {\r\n      return usersArr.indexOf(item) === pos;\r\n    }); // [\"test\", \"admin\"]\r\n\r\n    const UserName = localStorage.getItem('userName');\r\n    const index = usersArr.indexOf(UserName);\r\n    if (index >= 0) {\r\n      usersArr.splice(index, 1); // [\"test\"]\r\n    }\r\n\r\n    const outUsers = usersArr.map((user) => {\r\n      return (\r\n        <Myli onClick={() => this.handleUserClick(user)} key={user}>\r\n          {user} {this.state[user] ? ' + ' : null}\r\n        </Myli>\r\n      );\r\n    });\r\n    return (\r\n      <Wrapper>\r\n        <p style={{ color: 'red' }}>Click on the user to Follow :) </p>\r\n        <ul>{outUsers}</ul>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    data: state.users.data,\r\n    followList: state.users.followList\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onGetUsers: () => dispatch(actions.GetUsers()),\r\n    onClickUser: (user, followed, followList) =>\r\n      dispatch(actions.followUsersHandler(user, followed, followList))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfUsers);\r\n\r\nconst Wrapper = styled.div`\r\n  width: 50%;\r\n  height: auto;\r\n  margin: 50px auto;\r\n  border: 1px solid #eee;\r\n  box-shadow: 0 2px 3px #ccc;\r\n  text-align: center;\r\n`;\r\n\r\nconst Myli = styled.li`\r\n  list-style: none;\r\n  color: #e84855;\r\n  font-weight: bold;\r\n  font-weight: 20px;\r\n  cursor: pointer;\r\n`;\r\n","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const getUsersStart = () => {\r\n  return {\r\n    type: actionTypes.GET_USERS_START\r\n  };\r\n};\r\n\r\nexport const getUsersSuccess = (data) => {\r\n  return {\r\n    type: actionTypes.GET_USERS_SUCCESS,\r\n    data: data\r\n  };\r\n};\r\n\r\nexport const getUsersFail = (error) => {\r\n  return {\r\n    type: actionTypes.GET_USERS_FAIL,\r\n    error: error\r\n  };\r\n};\r\n\r\nexport const GetUsers = () => {\r\n  return (dispatch) => {\r\n    dispatch(getUsersStart());\r\n    axios\r\n      .get(\r\n        'https://postsapp-adcf2.firebaseio.com/post.json?auth=' +\r\n          localStorage.getItem('token')\r\n      )\r\n      .then((res) => {\r\n        dispatch(getUsersSuccess(res.data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getUsersFail(err.response.data.error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const followUsers = (followList) => {\r\n  return {\r\n    type: actionTypes.FOLLOW__USERS_HANDLER,\r\n    followList: followList\r\n  };\r\n};\r\n\r\nexport const followUsersHandler = (userName, followed, followList) => {\r\n  return (dispatch) => {\r\n    let newList = [...followList].concat(userName);\r\n\r\n    console.log('[USERNAME]: ', userName);\r\n    console.log('[AFTER CONCAT]: ', newList);\r\n\r\n    if (followed) {\r\n      newList = [...newList].filter((user) => {\r\n        return user !== userName;\r\n      });\r\n    }\r\n    console.log('[AFTER FILTER]: ', newList);\r\n    dispatch(followUsers(newList)); // followeed users list\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nimport Header from '../components/Header';\r\nimport ListOfUsers from '../components/ListOfUsers';\r\n\r\nconst ListOfUsersScreen = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <ListOfUsers />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfUsersScreen;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <Wrapper>\r\n      <header\r\n        style={{\r\n          color: '#e84855',\r\n          fontWeight: 'bold',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n        {props.title}\r\n      </header>\r\n      <article style={{ whiteSpace: 'normal', wordBreak: 'break-all' }}>\r\n        {props.content}\r\n      </article>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 50%;\r\n  height: auto;\r\n  padding: 10px;\r\n  margin: 50px auto;\r\n  border: 1px solid #eee;\r\n  box-shadow: 0 2px 3px #ccc;\r\n  text-align: center;\r\n  display: grid;\r\n  grid-gap: 5px;\r\n  grid-template-columns: 2fr 8fr;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Header from '../components/Header';\r\nimport Post from '../components/Post';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from 'axios';\r\n\r\nclass MyFeedScreen extends Component {\r\n  state = {\r\n    OutputData: []\r\n  };\r\n  componentDidMount() {\r\n    const queryParams =\r\n      '?auth=' +\r\n      this.props.token +\r\n      '&orderBy=\"userId\"&equalTo=\"' +\r\n      this.props.userId +\r\n      '\"';\r\n    axios\r\n      .get('https://postsapp-adcf2.firebaseio.com/post.json' + queryParams)\r\n      .then((res) => {\r\n        this.setState({ OutputData: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n  render() {\r\n    //console.log('[DATA]', this.props.data);\r\n    //console.log('[FOLLOW LIST]', this.props.followList);\r\n\r\n    let Posts = null;\r\n    if (this.state.OutputData) {\r\n      Posts = Object.values(this.state.OutputData).map((post) => {\r\n        return (\r\n          <Post key={post.title} title={post.title} content={post.content} />\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <Wrapper>\r\n        <Header />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div>{Posts}</div>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n    data: state.users.data,\r\n    followList: state.users.followList\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MyFeedScreen);\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as actions from '../store/actions/index';\r\n\r\nclass Logout extends Component {\r\n  componentDidMount() {\r\n    this.props.onLogout();\r\n  }\r\n  render() {\r\n    return <Redirect to='/login' />;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onLogout: () => dispatch(actions.logout())\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);\r\n","import React, { Component } from 'react';\r\n\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport AuthScreen from './screens/AuthScreen';\r\nimport NewPostScreen from './screens/NewPostScreen';\r\nimport ListOfUsersScreen from './screens/ListOfUsersScreen';\r\nimport MyFeedScreen from './screens/MyFeedScreen';\r\nimport Logout from './components/Logout';\r\nimport * as actions from './store/actions/index';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onTryAutoSignup();\r\n  }\r\n  render() {\r\n    let routes = (\r\n      <Switch>\r\n        <Route exact path='/login' component={AuthScreen} />\r\n        <Redirect to='/login' />\r\n      </Switch>\r\n    );\r\n\r\n    if (this.props.isAuth) {\r\n      routes = (\r\n        <Switch>\r\n          <Route exact path='/login' component={AuthScreen} />\r\n          <Route exact path='/' component={NewPostScreen} />\r\n          <Route exact path='/logout' component={Logout} />\r\n          <Route exact path='/users' component={ListOfUsersScreen} />\r\n          <Route exact path='/feed' component={MyFeedScreen} />\r\n          <Redirect to='/' />\r\n        </Switch>\r\n      );\r\n    }\r\n    return <div>{routes}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.token !== null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n  email: '',\r\n  password: '',\r\n  token: null,\r\n  userId: null,\r\n  error: null,\r\n  userName: null,\r\n  authRedirectPath: '/'\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n  return updateObject(state, { error: null, userName: action.userName });\r\n};\r\n\r\nconst authSuccess = (state, action) => {\r\n  return updateObject(state, {\r\n    token: action.idToken,\r\n    userId: action.userId,\r\n    error: null\r\n  });\r\n};\r\n\r\nconst authFail = (state, action) => {\r\n  return updateObject(state, {\r\n    error: action.error\r\n  });\r\n};\r\n\r\nconst authLogout = (state, action) => {\r\n  return updateObject(state, {\r\n    token: null,\r\n    userId: null,\r\n    userName: null\r\n  });\r\n};\r\n\r\nconst setAuthRedirectPath = (state, action) => {\r\n  return updateObject(state, {\r\n    authRedirectPath: action.path\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.AUTH_START:\r\n      return authStart(state, action);\r\n    case actionTypes.AUTH_SUCCESS:\r\n      return authSuccess(state, action);\r\n    case actionTypes.AUTH_FAIL:\r\n      return authFail(state, action);\r\n    case actionTypes.AUTH_LOGOUT:\r\n      return authLogout(state, action);\r\n    case actionTypes.SET_AUTH_REDIRECT_PATH:\r\n      return setAuthRedirectPath(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  data: null,\r\n  followList: [],\r\n  error: ''\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_USERS_START:\r\n      return { ...state };\r\n    case actionTypes.GET_USERS_SUCCESS:\r\n      return { ...state, data: action.data };\r\n    case actionTypes.GET_USERS_FAIL:\r\n      return { ...state, error: action.error };\r\n    case actionTypes.FOLLOW__USERS_HANDLER:\r\n      return {\r\n        ...state,\r\n        followList: action.followList\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport authReducer from './store/reducers/auth';\r\nimport usersReducer from './store/reducers/ListOfUsers';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  users: usersReducer\r\n});\r\n\r\n// unlock redux dev tools if we are developer mode and not in production mode in congfig\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV === 'development'\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    : null || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}